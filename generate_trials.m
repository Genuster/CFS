
positions = ["UpperLeft" "Top" "UpperRight";
        "Left" "Center" "Right";
        "LowerLeft" "Bottom" "LowerRight"];

import CFS.Experiment.* ...
    CFS.Element.Screen.* ...
    CFS.Element.Data.* ...
    CFS.Element.Evidence.* ...
    CFS.Element.Stimulus.*


% Initiate an object, for visual priming CFS use experiment = VPCFS(),
% for breaking CFS use experiment = BCFS(),
% for visual adaptation CFS use experiment = VACFS().

experiment = VPCFS();

experiment.fixation = Fixation( ...
    duration=1, ...
    arm_length=10, ...
    line_width=6, ...
    color='#525252');

experiment.frame = CheckFrame( ...
    checker_length=30, ...
    checker_width=15, ...
    hex_colors={'#FFFFFF', '#000000'});

experiment.addprop('stimulus_1');
experiment.addprop('stimulus_2');
experiment.stimulus_1 = SuppressedStimulus( ...
    './Images/Gabors', ...
    appearance_delay=0, ...
    fade_in_duration=0, ...
    show_duration=5, ...
    fade_out_duration=0, ...
    position="Left", ...
    size=0.3, ...
    padding=0.5, ...
    xy_ratio=1, ...
    contrast=0.3, ...
    rotation=0);
experiment.stimulus_2 = SuppressedStimulus( ...
    './Images/Gabors', ...
    appearance_delay=0, ...
    fade_in_duration=0, ...
    show_duration=5, ...
    fade_out_duration=0, ...
    position="Right", ...
    size=0.3, ...
    padding=0.5, ...
    xy_ratio=1, ...
    contrast=0.3, ...
    rotation=0);

experiment.masks = Masks( ...
    './Masks/', ...
    temporal_frequency=10, ...
    duration=5, ...
    mondrians_shape=1, ...
    mondrians_color=15, ...
    position="Right", ...
    size=0.45, ...
    padding=0.5, ...
    xy_ratio=0.8, ...
    contrast=1, ...
    rotation=0);


if class(experiment) == "CFS.Experiment.VPCFS"
    
    experiment.target = TargetStimulus( ...
        './Images/Target_images', ...
        duration=1, ...
        position="Left", ...
        size=0.3, ...
        padding=0.5, ...
        xy_ratio=1, ...
        contrast=1, ...
        rotation=0);

    experiment.mafc = ImgMAFC( ...
        keys={'LeftArrow', 'RightArrow'}, ...
        title='Which one have you seen?', ...
        position='Center', ...
        size=0.75, ...
        xy_ratio=1);

%     experiment.mafc = TextMAFC( ...
%         keys={'LeftArrow', 'RightArrow'}, ...
%         title='Which one have you seen?', ...
%         options={'Simulacra', 'Simulation'});

    experiment.pas = PAS( ...
        keys={'0)', '1!', '2@', '3#'}, ...
        title='How clear was the experience?',...
        options={ ...
        '0: No experience', ...
        '1: A weak experience', ... 
        '2: An almost clear experience', ...
        '3: A clear experience'});
    
end

if class(experiment) == "CFS.Experiment.BCFS"

    experiment.stimulus_break = BreakResponse( ...
        keys={'LeftArrow', 'RightArrow'});

end


if ~exist('.temp', 'dir')
    mkdir('.temp')
end
save('.temp\experiment.mat', 'experiment')

n_blocks = 1;
n_trials = [5];

stimuli = regexp(properties(experiment), 'stimulus_\d', 'match', 'once');
stimuli = sort(stimuli(~cellfun('isempty', stimuli)));


trial_matrix = cell(1, n_blocks);
for block = 1:n_blocks
    for trial = 1:n_trials(block)
        load('.temp\experiment.mat');
        experiment.stimulus_1.index = randi(8);
        experiment.stimulus_2.index = randi(8);
        experiment.target.index = randi(2);
%         for stim_idx = 1:length(stimuli)
%             experiment.(stimuli{stim_idx}).position = positions(randi(9));
%             experiment.(stimuli{stim_idx}).show_duration = randi([1,2]);
%             experiment.(stimuli{stim_idx}).fade_in_duration = randi([0,1]);
%             experiment.(stimuli{stim_idx}).fade_out_duration = randi([0,1]);
%             experiment.(stimuli{stim_idx}).index = randi(9);
%             experiment.(stimuli{stim_idx}).rotation = randi(360);
%             experiment.(stimuli{stim_idx}).contrast = 1;
%         end
        trial_matrix{block}{trial} = experiment;
    end
end

rmdir('.temp', 's')
save('TrialMatrices\experiment.mat', 'trial_matrix')
